{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAkBA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,uBAAwCK,OAAfR,EAAS,QAAYQ,OAANP,EAAM,OAEpDG,EAAK,sBAAqCI,OAAfR,EAAS,QAAYQ,OAANP,EAAM,M,GAEnDA,E,IAzBQQ,SAASC,cAAc,SAE/BC,iBAAiB,UAAU,SAAAC,GAChCA,EAAMC,iBAMN,IAJA,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYf,EAAKa,EAALb,MAAOgB,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OAGlBC,EAAI,EAAGA,GAAKC,OAAOF,EAAOG,OAAQF,IACzCpB,EAAcoB,EAAGC,OAAOH,EAAKI,QAAUF,EAAI,GAAKC,OAAOnB,EAAMoB,QAC1DC,MAAK,SAAAC,G,OAAO1B,EAAA2B,OAAOC,QAAQF,E,IAC3BG,OAAM,SAAAC,G,OAAS9B,EAAA2B,OAAOI,QAAQD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n\nformEl.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  for (let i = 1; i <= Number(amount.value); i++) {\n    createPromise(i, Number(step.value) * (i - 1) + Number(delay.value))\n      .then(msg => Notify.success(msg))\n      .catch(error => Notify.failure(error));\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","concat","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","step","amount","i","Number","value","then","msg","Notify","success","catch","error","failure"],"version":3,"file":"03-promises.e60ed3e6.js.map"}