{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAkBA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,uBAAqBH,QAAiBC,OAE5CG,EAAK,sBAAoBJ,QAAeC,MAAU,GAErDA,EAAM,G,CAzBEO,SAASC,cAAc,SAE/BC,iBAAiB,UAAUC,IAChCA,EAAMC,iBAEN,MACEC,UAAUZ,MAAEA,EAAKa,KAAEA,EAAIC,OAAEA,IACvBJ,EAAMK,cAEV,IAAK,IAAIC,EAAI,EAAGA,GAAKC,OAAOH,EAAOI,OAAQF,IACzClB,EAAckB,EAAGC,OAAOJ,EAAKK,OAASF,EAAIC,OAAOjB,EAAMkB,QACpDC,MAAKC,GAAOxB,EAAAyB,OAAOC,QAAQF,KAC3BG,OAAMC,GAAS5B,EAAAyB,OAAOI,QAAQD,IAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n\nformEl.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  for (let i = 1; i <= Number(amount.value); i++) {\n    createPromise(i, Number(step.value) * i + Number(delay.value))\n      .then(msg => Notify.success(msg))\n      .catch(error => Notify.failure(error));\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","event","preventDefault","elements","step","amount","currentTarget","i","Number","value","then","msg","Notify","success","catch","error","failure"],"version":3,"file":"03-promises.7bba5ac2.js.map"}